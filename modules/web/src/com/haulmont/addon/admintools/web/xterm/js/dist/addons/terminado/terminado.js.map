{"version":3,"file":"terminado.js","sources":["../../../src/addons/terminado/terminado.ts","../../../node_modules/browser-pack/_prelude.js"],"sourcesContent":["/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This module provides methods for attaching a terminal to a terminado\n * WebSocket stream.\n */\n\n/**\n * Attaches the given terminal to the given socket.\n *\n * @param {Terminal} term - The terminal to be attached to the given socket.\n * @param {WebSocket} socket - The socket to attach the current terminal.\n * @param {boolean} bidirectional - Whether the terminal should send data\n *                                  to the socket as well.\n * @param {boolean} buffered - Whether the rendering of incoming data\n *                             should happen instantly or at a maximum\n *                             frequency of 1 rendering per 10ms.\n */\nexport function terminadoAttach(term, socket, bidirectional, buffered) {\n  bidirectional = (typeof bidirectional == 'undefined') ? true : bidirectional;\n  term.socket = socket;\n\n  term._flushBuffer = function() {\n    term.write(term._attachSocketBuffer);\n    term._attachSocketBuffer = null;\n  };\n\n  term._pushToBuffer = function(data) {\n    if (term._attachSocketBuffer) {\n      term._attachSocketBuffer += data;\n    } else {\n      term._attachSocketBuffer = data;\n      setTimeout(term._flushBuffer, 10);\n    }\n  };\n\n  term._getMessage = function(ev) {\n    var data = JSON.parse(ev.data)\n    if( data[0] == \"stdout\" ) {\n      if (buffered) {\n        term._pushToBuffer(data[1]);\n      } else {\n        term.write(data[1]);\n      }\n    }\n  };\n\n  term._sendData = function(data) {\n    socket.send(JSON.stringify(['stdin', data]));\n  };\n\n  term._setSize = function(size) {\n    socket.send(JSON.stringify(['set_size', size.rows, size.cols]));\n  };\n\n  socket.addEventListener('message', term._getMessage);\n\n  if (bidirectional) {\n    term.on('data', term._sendData);\n  }\n  term.on('resize', term._setSize);\n\n  socket.addEventListener('close', term.terminadoDetach.bind(term, socket));\n  socket.addEventListener('error', term.terminadoDetach.bind(term, socket));\n};\n\n/**\n * Detaches the given terminal from the given socket\n *\n * @param {Xterm} term - The terminal to be detached from the given socket.\n * @param {WebSocket} socket - The socket from which to detach the current\n *                             terminal.\n */\nexport function terminadoDetach(term, socket) {\n  term.off('data', term._sendData);\n\n  socket = (typeof socket == 'undefined') ? term.socket : socket;\n\n  if (socket) {\n    socket.removeEventListener('message', term._getMessage);\n  }\n\n  delete term.socket;\n};\n\nexport function apply(terminalConstructor) {\n  /**\n   * Attaches the current terminal to the given socket\n   *\n   * @param {WebSocket} socket - The socket to attach the current terminal.\n   * @param {boolean} bidirectional - Whether the terminal should send data\n   *                                  to the socket as well.\n   * @param {boolean} buffered - Whether the rendering of incoming data\n   *                             should happen instantly or at a maximum\n   *                             frequency of 1 rendering per 10ms.\n   */\n  terminalConstructor.prototype.terminadoAttach = function(socket, bidirectional, buffered) {\n    return terminadoAttach(this, socket, bidirectional, buffered);\n  };\n\n  /**\n   * Detaches the current terminal from the given socket.\n   *\n   * @param {WebSocket} socket - The socket from which to detach the current\n   *                             terminal.\n   */\n  terminalConstructor.prototype.terminadoDetach = function(socket) {\n    return terminadoDetach(this, socket);\n  };\n}\n",null],"names":[],"mappings":"ACAA;;;ADmBA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AA9CA;AA8CC;AASD;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAVA;AAUC;AAED;AAWA;AACA;AACA;AAQA;AACA;AACA;AACA;AAxBA;;;"}