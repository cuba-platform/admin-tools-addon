{"version":3,"file":"winptyCompat.js","sources":["../../../src/addons/winptyCompat/winptyCompat.ts","../../../node_modules/browser-pack/_prelude.js"],"sourcesContent":["/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function winptyCompatInit(terminal): void {\n    // Don't do anything when the platform is not Windows\n    const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].indexOf(navigator.platform) >= 0;\n    if (!isWindows) {\n      return;\n    }\n\n    // Winpty does not support wraparound mode which means that lines will never\n    // be marked as wrapped. This causes issues for things like copying a line\n    // retaining the wrapped new line characters or if consumers are listening\n    // in on the data stream.\n    //\n    // The workaround for this is to listen to every incoming line feed and mark\n    // the line as wrapped if the last character in the previous line is not a\n    // space. This is certainly not without its problems, but generally on\n    // Windows when text reaches the end of the terminal it's likely going to be\n    // wrapped.\n    terminal.on('linefeed', () => {\n      const line = terminal.buffer.lines.get(terminal.buffer.ybase + terminal.buffer.y - 1);\n      const lastChar = line[terminal.cols - 1];\n\n      if (lastChar[3] !== 32 /* ' ' */) {\n        const nextLine = terminal.buffer.lines.get(terminal.buffer.ybase + terminal.buffer.y);\n        (<any>nextLine).isWrapped = true;\n      }\n    });\n}\n\nexport function apply(terminalConstructor) {\n  terminalConstructor.prototype.winptyCompatInit = function(): void {\n    winptyCompatInit(this);\n  };\n}\n",null],"names":[],"mappings":"ACAA;;;ADKA;AAEA;AACA;AACA;AACA;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA4BA;AACA;AACA;AACA;AACA;AAJA;;;"}