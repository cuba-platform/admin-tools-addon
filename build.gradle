buildscript {
    ext.cubaVersion = '6.9.3'
    repositories {
        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'cuba')
                password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : 'cuba123')
            }
        }
        maven {
            url  'https://dl.bintray.com/mariodavid/cuba-components'
        }
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
    }
}

def globalModule = project(':cuba-at-global')
def coreModule = project(':cuba-at-core')
def guiModule = project(':cuba-at-gui')
def webModule = project(':cuba-at-web')

def servletApi = 'javax.servlet:javax.servlet-api:3.1.0'

apply(plugin: 'idea')
apply(plugin: 'cuba')

cuba {
    artifact {
        group = 'com.haulmont.addon.admintools'
        version = '1.1'
        isSnapshot = true
    }
    tomcat {
        dir = "$project.rootDir/deploy/tomcat"
    }
    ide {
        vcs = 'Git'
    }
}

dependencies {
    appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")
    appComponent("de.diedavids.cuba.runtimediagnose:runtime-diagnose-global:1.1.0")
}

def hsql = 'org.hsqldb:hsqldb:2.2.9'

configure([globalModule, coreModule, guiModule, webModule]) {
    apply(plugin: 'java')
    apply(plugin: 'groovy')
    apply(plugin: 'maven')
    apply(plugin: 'idea')
    apply(plugin: 'cuba')
    apply(plugin: 'checkstyle')

    sourceSets {
        main {
            groovy { srcDirs = ["src"] }
            resources {
                srcDir 'resources'
            }
        }
        test {
            java {
                srcDirs = ['test']
            }
            groovy {
                srcDirs = ['test']
            }
        }
        testUnit {
            java {
                srcDirs = ['test-unit']
            }
            groovy {
                srcDirs = ['test-unit']
            }
        }
    }

    dependencies {
        compile('io.vavr:vavr:0.9.0')
        compile('org.codehaus.groovy:groovy-all:2.4.11')
        compile('jaxen:jaxen:1.1.6')
        compile('org.jetbrains:annotations:15.0')
        testCompile('junit:junit:4.12')
        testCompile('cglib:cglib-nodep:3.2.4')
        testCompile('org.spockframework:spock-core:1.1-groovy-2.4-rc-3')
        testRuntime('javax.servlet:javax.servlet-api:3.1.0')

        testUnitCompile sourceSets.main.output
        testUnitCompile configurations.testCompile
        testUnitRuntime configurations.testRuntime
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }

    String checkstyleConfigDir = "${rootProject.projectDir}/config/checkstyle"
    checkstyle {
        toolVersion = "6.2"
        configFile = new File("${checkstyleConfigDir}/checkstyle.xml".toString())
        configProperties = [
                'checkstyleConfigDir': checkstyleConfigDir
        ]
        reportsDir = new File("${buildDir}/checkstyle".toString())
        ignoreFailures = false
    }

    checkstyleMain << {
        def checkstyleDir = "${project.buildDir}/checkstyle".toString()
        ant.xslt('in': "$checkstyleDir/main.xml",
                out: "$checkstyleDir/$project.name-checkstyle.html",
                style: "$checkstyleConfigDir/checkstyle.xsl")
    }


    test {
        ignoreFailures = true
    }

    idea {
        module {
            testSourceDirs += file('test-unit')
        }
    }

    task testUnit(type: Test) {
        testClassesDir = sourceSets.testUnit.output.classesDir
        classpath = sourceSets.testUnit.runtimeClasspath
    }

    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")
    }
}

configure(globalModule) {
    task enhance(type: CubaEnhancing)

    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : ''))
        }
    }

    configurations {
        testOutput.extendsFrom(testCompile)
    }

    task jarTest(type: Jar, dependsOn: testClasses) {
        from sourceSets.test.output
        classifier = 'test'
    }

    artifacts {
        testOutput jarTest
    }
}

def dbNameParam = 'cubaat'
def dbTestNameParam = 'cubaat-test'

configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        provided(servletApi)
        jdbc(hsql)
        testCompile project(path: ':cuba-at-global', configuration: 'testOutput')
        testRuntime(hsql)
    }

    task cleanConf(description: 'Cleans up conf directory') {
        doLast {
            def dir = new File(cuba.tomcat.dir, '/conf/cuba-at-core')
            if (dir.isDirectory()) {
                ant.delete(includeemptydirs: true) {
                    fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
                }
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = 'cuba-at-core'
        appJars('cuba-at-global', 'cuba-at-core')
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'hsql'
        host = 'localhost'
        dbName = 'cubaat'
        dbUser = 'sa'
        dbPassword = ''
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'hsql'
        host = 'localhost'
        dbName = 'cubaat'
        dbUser = 'sa'
        dbPassword = ''
    }

    task startDb(description: 'Starts local HSQLDB server', type: CubaHsqlStart) {
        dbName = dbNameParam
    }

    task stopDb(description: 'Stops local HSQLDB server', type: CubaHsqlStop) {
        dbName = dbNameParam
    }

    task removeDb(description: 'Removes local HSQL database', type: Delete) {
        delete new File("$rootProject.projectDir/data")
    }

    task killDb(description: 'Kill local HSQLDB server process running on port 9001', type: CubaKillProcess) {
        port = 9001
    }

    task startTestDb(description: 'Starts local HSQLDB server', type: CubaHsqlStart) {
        dbName = dbTestNameParam
    }

    task stopTestDb(description: 'Stops local HSQLDB server', type: CubaHsqlStop) {
        dbName = dbTestNameParam
    }

    task createTestDb(dependsOn: assembleDbScripts, description: 'Creates local HSQL database', type: CubaDbCreation) {
        dbms = 'hsql'
        dbName = dbTestNameParam
        dbUser = 'sa'
        dbPassword = ''
    }
}

configure(guiModule) {
    dependencies {
        compile(globalModule)

    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/haulmont/addon/admintools/**"
        into "$cuba.tomcat.dir/conf/cuba-at"
    }
}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        provided(servletApi)
        compile(guiModule)
        compile group: 'com.jcraft', name: 'jsch', version: '0.1.54'
        testCompile project(path: ':cuba-at-global', configuration: 'testOutput')
    }

    task webArchive(type: Zip) {
        from file("$buildDir/web")
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/haulmont/addon/admintools/**"
        into "$cuba.tomcat.dir/conf/cuba-at"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = 'cuba-at'
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory') {
        doLast {
            def dir = new File(cuba.tomcat.dir, '/conf/cuba-at')
            if (dir.isDirectory()) {
                ant.delete(includeemptydirs: true) {
                    fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
                }
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = 'cuba-at'
        appJars('cuba-at-global', 'cuba-at-gui', 'cuba-at-web')
    }
}





task undeploy(type: Delete, dependsOn: ':cuba-at-web:cleanConf') {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/cuba-at-core")
    delete("$cuba.tomcat.dir/webapps/cuba-at")
}

task restart(dependsOn: ['stop', ':cuba-at-core:deploy', ':cuba-at-web:deploy'], description: 'Redeploys applications and restarts local Tomcat') {
    doLast {
        ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            not {
                socket(server: 'localhost', port: '8787')
            }
        }
        start.execute()
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.3.1'
}

apply from: 'extra.gradle'
